#+STARTUP: overview
#+SEQ_TODO: TODO(t@) NEXT(n@) STARTED(s@) WAITING(w@) | DONE(d@) OLD(o@) CANCELLED(c@)
#+TODO: MAYBE(m@) FAILED(f@) LOG(l@) DEFERRED(e@) BUG(b@)
* autoload
* dref
** MAYBE add SPECIAL locative and make variable an alias of it?
** MAYBE support DECLARATION docstrings?
** MAYBE support SETF docstring?
** MAYBE better SOURCE addressing for INCLUDE
** MAYBE the LAMBDA locative could evaluate its arguments
** MAYBE "function. FOO" should not consider FUNCTION a locative
"BAR has a useful function, FOO doesn't."
** MAYBE complete ASDF:SYSTEM and CLHS names case-insensitively?
Currently, MAP-NAMES-FOR-TYPE returns only the subset of names that
DREF:DREF allows. For example, MAP-NAMES-FOR-TYPE returns "Printer
Dispatching" but DREF allows case-insensitive substring matching:

(dref:dref "isPat" 'pax:clhs)
==> #<DREF:DREF "22.1.2" (MGL-PAX:CLHS MGL-PAX:SECTION)>

(dref:dref "printer di" 'pax:clhs)
==> #<DREF:DREF "22.1.2" (MGL-PAX:CLHS MGL-PAX:SECTION)>

But completing "printer di<TAB> doesn't work.

So, we need to pass PREFIX to MAP-NAMES or similar, but that won't
support fancier completion mechanisms such as c-p-c.

Instead, the completion may match case-insensitively but replace with
the canonical name?

Let MAP-NAMES-FOR-TYPE somehow specify whether matching is case-
sensitive?

There is always mgl-pax-apropos for case-insensitive matching.
** MAYBE add SYMBOL as an alias for dislocated?
** MAYBE add source locative
That is, link to GitHub, without documenting anything. Useful for code
examples without actually INCLUDEing them. Does/should LAMBDA do this?
** DONE compare DRef to the Definitions library
Pros of DRef:
- Supports string names (called designators in Definitions). PAX needs
  to distinguish those from symbol-based ones.
- Operations such as ARGLIST (~ DEFINITIONS:ARGUMENTS) can be
  specialized on normal objects for RESOLVEable definitions. In
  Definitions, operations are always specialized on a DEFINITION
  subclass, which can result in unnecessary duplication of the
  hierarchy.
- (LOCATE #'PRINT) is fast, the equivalent DEFINITIONS:WHO-DEFINES is
  very slow. DRef uses this to allow specialization of ARGLIST on
  either object or definition type.
- Can LOCATE a single unresolvable definition (e.g. (DREF 'XXX
  'VARIABLE)). Definitions only has WHO-DEFINES, which needs the
  OBJECT of the definition. Needed by PAX.
- DRef supports Swank buffer source locations when running under
  Slime. Needed by PAX.
- DRef has XREFs, which do not need even the locative type to be
  defined when they are created. Needed by PAX.
- DREF-APROPOS more flexible. Needed by PAX.
- ARGLIST returns the type of arglist.
- DOCSTRING returns the package if available. Needed by PAX.
- The DRef packages can be :USEd without conflicts with CL.
  Definitions shadows CL:SYMBOL, CL:PACKAGE, CL:CLASS, etc.
- DRef supports only 7 Lisps, Definitions 3.
- DRef has an extensive test suite. Definitions has no tests.
- DRef has extensive documentation.

Pros of Definitions:
- Definitions has BIND, (SETF OBJECT), UNBIND, (SETF DOCUMENTATION).
  These can be added to DRef if needed.
** MAYBE add DCAST and DLOOKUP locatives
Needs a constant name such as LOCATE* or DREF*.
* pax base
** MAYBE swap the MGL-PAX package name with the PAX nickname
... somehow without breaking existing URLs, which have
MGL-PAX:<LOCATIVE> all over them?
** MAYBE document :EXPORT <PGK>?
Is this the right idea? DRef no longer uses this mechanism.
** MAYBE DEFSTRUCT* that allows :DOCUMENTATION
* navigate
** BUG (low) locative completion: nicknames don't work
print f<TAB> -> "print function"
print dref:f<TAB> -> no completions
(eq 'function 'dref:function) => t

print (mgl-pax:clh<TAB> -> works
print (pax:clh<TAB> -> no completions

Actually, it's not just the completion of the locative, but of the
second sexp, which should be informed by the first sexp.

Normal completion includes nicknames as "pax:" without relisting all
symbols.
* document
** OPT parse and print markdown once when *format* is :html?
This would involve rewriting everything to emit parse tree fragments or be able to produce html directly. Either way, it is not without cost.
** OPT 3bmd parsing performance on large blocks
https://github.com/3b/3bmd/issues/56
** MAYBE consider CommonDoc from the 40ants fork
Or maybe just have a good api in MGL-PAX::@EXTENDING-DOCUMENT? Pandoc
helps to convert to many formats.
** MAYBE support external links
This is partially done. There is CLHS and there are glossary terms
with URLs. See EXTERNAL-DREF-P and co.
** MAYBE link to MOP
** MAYBE pretty print lambda-lists (including default values)
and values of variables. Unfortunately, there seems to be no way to
use the lisp pretty printer for this because output also includes
markup. We could get the original indentation from the sources.
** MAYBE get variable initforms from source?
Or fall back on this for deficient ARGLISTs. Will be really slow.
** MAYBE use SECTION-PACKAGE from "first" enclosing section?
That is, when generating documentation for something that's referenced
by one or more sections. See PAX::SECTIONS-THAT-CONTAIN and
PAX::SORT-BY-PROXIMITY.
** BUG (low) C-. history depends on current package
E.g. 'clhs' works in a package where PAX is :USEd but not elsewhere.

But so does M-.'s history.
** CANCELLED autoload documentation when needed?
CLOSED: [2025-05-07 Wed 09:29]
- State "CANCELLED" from "MAYBE" [2025-05-07 Wed 09:29] \\
  Autoloading is very restricted in its abilities, and I can't see a
  perfect way to make it work for e.g. sections. It think accessing
  the section's variable should trigger autoloading the real section
  definition, but that's not possible to catch. Maybe it's too much
  complexity for little gain, especially since generating
  documentation loads dref/full.
E.g. for named-readtables, which has its docs in named-readtables/doc.
Maybe, more generally:
   (setf (definition-property xref 'autoload)
         ...)

This could help with the package complications in dref/src/base/
package.lisp.

Casting needs to be aware of autoload.

(autoload-dref (xref '@xxx 'section) "dref/full")
** CANCELLED warn when generating offline docs for autoloaded functions?
CLOSED: [2025-05-07 Wed 09:40]
** CANCELLED provide way to autoload from live documentation?
CLOSED: [2025-05-07 Wed 09:40]
- State "CANCELLED"  from "MAYBE"      [2025-05-07 Wed 09:40]
** MAYBE web: link asdf system to definitions in it?
Packages defined are linked already, which handles many cases but not
all, and of course includes definitions (e.g methods) not defined in
the system.
** CANCELLED live browsing: reload page automatically on redefinition
Its value is dubious. Not even Emacs help does this.
** CANCELLED print ASDF/SYSTEM:SYSTEM as ASDF:SYSTEM
ASDF is a nickname of ASDF/INTERFACE.

This is doable when printing symbols directly, but not so easy when
the symbol is in a list or similar, so consistency would be a problem.
If anywhere, this belongs in the Lisp.
** MAYBE always replace titles but follow the link suppression rules?
** MAYBE generate offline documentation for everything in quicklisp?
Like https://quickref.common-lisp.net/index-per-library.html, but more
useful?
** MAYBE documentation conditional on live/offline
E.g. in DREF::@LOCATIVE-TYPE, we could link to the apropos page
linking all locatives in the running lisp, which makes no sense in
offline documentation.

Maybe this is a special case of dynamically generated documentation.
** MAYBE live browsing: allow filtering out local definitions when there is a clhs definition?
** MAYBE 40ants asdf-system-relative images?
https://github.com/40ants/doc/commit/4ae22efa20a4a2117da9dd8e96c1117458904d73
* web
** MAYBE implement a wiki on top?
PAX is already kind of a wiki.
* apropos
** MAYBE when exported by pax, we know the exact definition being exported
mgl-pax-apropos-package could take advantage?
** MAYBE web: have apropos name be editable?
This would make the PAX Live home page more capable without Emacs.
** MAYBE dref-apropos: add :SOURCE-LOCATION arg?
SOURCE-LOCATION may be anything with a source location, and DREF-
APROPOS would keep only definitions with source location below that.
** MAYBE option to sort apropos results by source location
Files in ASDF system order. Maybe this make sense for generating
documentation for a non-PAX system.
** CANCELLED Should DREF-APROPOS be made more flexible?
Regexp, generic filter functions, non-listing maps? Revisit if
filtering the list is a performance problem.
* transcribe
** MAYBE don't treat "debugger invoked on" as output
Well, it's a kind of output, but maybe it would be better for
consistency checking to treat it as a different kind of output. First,
capturing interaction with the debugger needs to be though out though.
** MAYBE (values 1 2) => 1, 2 on a single line?
** MAYBE add option to output the new transcript
* elisp
** MAYBE support SLY?
** MAYBE support elisp function and variable locatives?
Would it be nice to if M-. on "`mgl-pax-document` (elisp) would visit
the elisp def and C-. would call `describe-function` (elisp)?
** MAYBE M-. and C-. on large sexps (e.g. whole defun)
The error message is large and useless.
** MAYBE make tests more reliable
* literate programming
** MAYBE reorder source definitions
** MAYBE local functions?
** MAYBE named one-off local functions?
(defun foo (x)
  ;; Just for the name, really. Maybe control what it can close over?
  (subfoo ()
   ))
** MAYBE generate internals manual, which includes code
... but is ordered according to the documentation.
* MAYBE do not test the locative type of a DREF with EQ
At most places, using (TYPEP DREF 'SECTION-DREF) instead of (EQ (DREF-
LOCATIVE-TYPE DREF) 'SECTION) may make more sense.
* MAYBE better deal with Swank/Slynk dependencies
Probably it's too much to ask to have a portable introspection library
factored out of them. Conium seems abandoned. There is no clear scope
to support a stable API.
* MAYBE live tutorials notebook style?
* MAYBE "parent" look up includes (e.g. for NOTEs)
* marketing
** MAYBE find a catchy name for the method
- Illiterate Programming: Already used in the sense of "not literate programming".
- Documentation-Driven Development: Exists, and also a misnomer (see https://quotenil.com/multifaceted-development.html).
- Rubber Doc Development: reeks of pragmatism only unlike bath toys.
** Pitch for Lispers
User manuals manifest the design in prose and force clarity, but
writing manuals can be a drag and docs tend to lag the code. The tools
PAX offers try to minimize the distance between code and its
documentation to help keep them in sync.

Also, Common Lisp + SLIME/SLY/etc is a great interactive environment
with M-. all the way down. PAX takes interactivity to documentation
and makes it easy to navigate the graph of documented objects as well
as switching back and forth between code and its documentation.

Explorability is a killer feature of Emacs, and PAX applies to the
same idea to Common Lisp, going beyond what Emacs offers (teaching M-.
about definition types, more powerful linking, and not having a
docstring/info page dichotomy).

PAX shares the goals of literate programming if not its means:
documentation lives in code and not vice versa. Nothing is worth
giving up interactive development for.
** vs literate programming
- scoping of code in chunks can be a problem in LP
- notebooks are linear
- Rustdoc can check transcripts, so can doctest
- no NOTE anywhere

Common Lisp is quite relaxed about the order of function definitions,
but no so much about DEFMACRO, DEFVAR, DEFPARAMETER, DEFCONSTANT,
DEFTYPE , DEFCLASS, DEFSTRUCT, DEFMETHOD, DEFINE-COMPILER-MACRO, SET-
MACRO-CHARACTER, SET-DISPATCH-MACRO-CHARACTER, DEFPACKAGE.

However, code order can for the most part follow narrative order. In
practice, we end up with some DEFVARs far from their parent
DEFSECTIONs (but DECLAIM SPECIAL helps) or with their parent
DEFSECTION being far. Either way, with the right tooling, one can
quickly go from DEFVAR to its parent and see its documentation
(generated live).

- Often, one can extract the abstract algorithm as a macro out of a
  function (without incurring any run-time cost, with controlling
  scope properly) and document it there.
- Or with NOTE, the documentation can invade the implementation and be
  extracted from there.
- Internals manuals change too often, and that's basically the LP
  style. A lot of that is covered by comment and commit messages. User
  manuals on the otherhand don't change so much, and they explicitly
  represent the contract.

"Writing is Nature's way of showing you how sloppy your thinking
is." - Dick Guindon, cartoonist

"If you're thinking without writing, you only think you're thinking.
[…] Everyone thinks they think. If you don't write down your thoughts,
you are fooling yourself." — Leslie Lamport, creator of LaTeX (a
document prepration system)

Writing is Nature's Way of showing you how sloppy your thinking is.
Coding is Nature's Way of showing you how sloppy your writing is.
Testing is Nature's Way of showing you how sloppy your coding is.

If you can't write, you can't think. If you're not writing, you only
think you're thinking.

https://github.com/rebcabin/tangledown
https://akkartik.name/post/literate-programming
