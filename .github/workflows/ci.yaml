name: ocicl CI

on:
  push:
    branches: ['*']
  pull_request:
    branches: [ main, windows ]
  workflow_dispatch:

jobs:
  tests:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    defaults:      # use bash everywhere (Git Bash on Windows)
      run:
        shell: bash

    steps:
    # ── common ───────────────────────────────────────────────────────────
    - uses: actions/checkout@v4

    # ── OS-specific toolchain  ───────────────────────────────────────────
    - name: Install deps (MacOS via Homebrew)
      if: runner.os == 'macos'
      run: |
        brew install sbcl squid
        # expose brew env to later steps
        brew shellenv | sed 's/^export //' >> "$GITHUB_ENV"
        echo "$(brew --prefix)/bin" >> "$GITHUB_PATH"
        echo "$(brew --prefix)/sbin" >> "$GITHUB_PATH"

    - name: Install deps (Linux via Homebrew)
      if: runner.os == 'Linux'
      run: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        brew install sbcl squid
        # expose brew env to later steps
        brew shellenv | sed 's/^export //' >> "$GITHUB_ENV"
        echo "$(brew --prefix)/bin" >> "$GITHUB_PATH"
        echo "$(brew --prefix)/sbin" >> "$GITHUB_PATH"

    - name: Install deps (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        choco install -y sbcl openssl.light make wget
        echo "C:\Program Files\OpenSSL\bin" | Out-File $env:GITHUB_PATH -Append
        choco install squid -y --debug --verbose --trace squid

    # Export a helper that abstracts ocicl(.exe) name
    - name: Define OCICL_BIN env var
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "OCICL_BIN=ocicl.exe" >> "$GITHUB_ENV"
          echo "$LOCALAPPDATA/ocicl/bin" >> "$GITHUB_PATH"
        else
          echo "OCICL_BIN=ocicl" >> "$GITHUB_ENV"
        fi

    - name: Write local squid.conf
      run: |
        cat > squid.conf <<EOF
        http_port 3128
        dns_v4_first on
        access_log stdio:./access.log
        cache_log ./cache.log
        cache_store_log ./store.log
        pid_filename ./squid.pid
        logfile_rotate 0
        acl all src all
        http_access allow all
        shutdown_lifetime 1 second
        EOF

    - name: Locate squid.exe
      if: runner.os == 'Windows'
      id: find_squid
      shell: pwsh
      run: |
        $found = $null

        ## ── method 1 – read the Windows service definition ─────────────
        try {
          $svcLine = (sc.exe qc Squid 2>$null | Select-String 'BINARY_PATH_NAME').Line
          if ($svcLine) {
            $svcExe = ($svcLine -split ':',2)[1].Trim().Split()[0].Trim('"')
            if (Test-Path $svcExe) { $found = $svcExe; Write-Host "✓ via service: $found" }
          }
        } catch {}

        ## ── method 2 – look for an InstallLocation in MSI uninstall keys ─
        if (-not $found) {
          try {
            $key = Get-ItemProperty `
              'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*' |
              Where-Object { $_.DisplayName -match 'Squid' } |
              Select-Object -First 1
            if ($key -and $key.InstallLocation) {
              $candidate = Join-Path $key.InstallLocation 'sbin\squid.exe'
              if (Test-Path $candidate) { $found = $candidate; Write-Host "✓ via registry: $found" }
            }
          } catch {}
        }

        ## ── method 3 – brute-force search (silent on access-denied) ──────
        if (-not $found) {
          try {
            $hit = Get-ChildItem C:\ -Filter squid.exe -Recurse -File `
                   -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($hit) { $found = $hit.FullName; Write-Host "✓ via search:  $found" }
          } catch {}
        }

        if (-not $found) {
          Write-Error 'squid.exe not found on this runner'
          exit 1
        }

        ## expose it to subsequent steps
        "squid_path=$found" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Launch Squid (background)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # 1) Where did the service point?
        sc qc Squid | Select-String "BINARY_PATH_NAME"
        # 2) Show the files Chocolatey laid down
        Get-ChildItem "$env:ChocolateyInstall\lib\squid" -Recurse
        # 3) Find any squid.exe on the system
        Get-Command squid.exe -All
        $exe  = 'C:\Squid\sbin\squid.exe'   # path from the MSI
        $conf = "$PWD\squid.conf"           # your local config in the workspace
        Start-Process -FilePath $exe -ArgumentList '-N','-f',$conf -WindowStyle Hidden
        Start-Sleep -Seconds 5              # give Squid time to start

    - name: Launch Squid (background)
      if: runner.os != 'Windows'
      run: squid -N -f "./squid.conf" &

    - name: Build & install ocicl
      run: |
        ${SBCL:-sbcl} --load setup.lisp
        $OCICL_BIN version               # sanity
        $OCICL_BIN setup > ~/.sbclrc
        echo "(setf ocicl-runtime:*verbose* nil)" >> ~/.sbclrc

    - name: Prepare test env
      run: rm -rf systems systems.csv

    - name: Test “cli” template
      run: |
        mkdir testdir1 && cd testdir1
        $OCICL_BIN new cli-test cli
        cd cli-test
        make
        ./cli-test --help

    - name: Test “web1” template
      run: |
        mkdir testdir2 && cd testdir2
        $OCICL_BIN new web1-test web1
        cd web1-test
        make
        ./web1-test --help
        ./web1-test -p 8765 &
        APP_PID=$!
        for i in {1..30}; do
          curl --silent --fail http://localhost:8765/ && break
          echo "Waiting for web1…" && sleep 1
        done
        curl -s http://localhost:8765/ | grep "Welcome"
        kill $APP_PID

    - name: Test “basic” template
      run: |
        mkdir testdir3 && cd testdir3
        $OCICL_BIN new basic-test cli
        cd basic-test
        sbcl --eval "(asdf:load-system :basic-test)" \
             --eval "(basic-test:main)" \
             --eval "(uiop:quit 0)" | grep -v "Hello, world"

    - name: Test parent-dir install logic
      run: |
        set -euo pipefail
        mkdir -p testdir3/basic-test/child-test
        cd testdir3/basic-test/child-test

        $OCICL_BIN install completions

        # dir must stay empty
        [ "$(ls -A | wc -l)" -eq 0 ] || { echo "child-test not empty"; exit 1; }

        # completions must land beside parent
        ls -d ../*/cl-completions* >/dev/null 2>&1 || {
          echo "cl-completions* not found"; exit 1; }

    - name: Test ocicl through Dev Proxy (Windows)
      shell: bash
      run: |
        set -euo pipefail
        set -x

        LOG=access.log
        PORT=3128

        for _ in {1..30}; do
          grep -qi "listening on .*:${PORT}" "$LOG" && break
          sleep 1
        done || { echo "❌ squid proxy never started"; cat "$LOG"; exit 1; }
        echo "✅ squid proxy is listening"

        ### 4. Smoke-test through the proxy ###################################
        curl --proxy "http://127.0.0.1:${PORT}" --head --fail --silent \
             https://example.com --output /dev/null

        ### 5. Your real test #################################################
        HTTPS_PROXY="http://127.0.0.1:${PORT}" "$OCICL_BIN" list cl-ppcre

        cat "$LOG"

    - name: Check devproxy log for ocicl traffic
      # if: runner.os != 'Windows'
      run: |
        grep -q "ghcr.io" access.log \
          && echo "✅ ocicl used the proxy" \
          || (echo "❌ ocicl never hit the proxy" && exit 1)

    - uses: actions/upload-artifact@v4
      with:
        name: access-log-${{ runner.os }}
        path: access.log
