name: ocicl CI

on:
  push:
    branches: ['*']
  pull_request:
    branches: [ main, windows ]
  workflow_dispatch:

jobs:
  tests:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    defaults:      # use bash everywhere (Git Bash on Windows)
      run:
        shell: bash

    steps:
    # ── common ───────────────────────────────────────────────────────────
    - uses: actions/checkout@v4

    # ── OS-specific toolchain  ───────────────────────────────────────────
    - name: Install deps (MacOS via Homebrew)
      if: runner.os == 'macos'
      run: |
        brew install sbcl squid
        # expose brew env to later steps
        brew shellenv | sed 's/^export //' >> "$GITHUB_ENV"
        echo "$(brew --prefix)/bin" >> "$GITHUB_PATH"
        echo "$(brew --prefix)/sbin" >> "$GITHUB_PATH"

    - name: Install deps (Linux via Homebrew)
      if: runner.os == 'Linux'
      run: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        brew install sbcl squid
        # expose brew env to later steps
        brew shellenv | sed 's/^export //' >> "$GITHUB_ENV"
        echo "$(brew --prefix)/bin" >> "$GITHUB_PATH"
        echo "$(brew --prefix)/sbin" >> "$GITHUB_PATH"

    - name: Install deps (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        choco install -y sbcl openssl.light make wget
        echo "C:\Program Files\OpenSSL\bin" | Out-File $env:GITHUB_PATH -Append

    - name: Download squid.msi (Windows)
      if: runner.os == 'Windows'
      run: curl --output squid.msi https://packages.diladele.com/squid/4.14/squid.msi

    - name: Install squid.msi (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        $file = "squid.msi"
        $log = "install.log"
        $procMain = Start-Process "msiexec" "/i `"$file`" /qn /l*! `"$log`"" -NoNewWindow -PassThru
        $procLog = Start-Process "powershell" "Get-Content -Path `"$log`" -Wait" -NoNewWindow -PassThru
        $procMain.WaitForExit()
        $procLog.Kill()

    - name: Define environment variables
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "OCICL_BIN=ocicl.exe" >> "$GITHUB_ENV"
          echo "$LOCALAPPDATA/ocicl/bin" >> "$GITHUB_PATH"
          echo "SQUID_LOGS=D:\\Squid\\var\\log\\squid\\access.log" >> "$GITHUB_ENV"
          echo "SUDO=" >> "$GITHUB_ENV"
        else
          echo "OCICL_BIN=ocicl" >> "$GITHUB_ENV"
          echo "SQUID_LOGS=/var/log/squid/access.log" >> "$GITHUB_ENV"
          echo "SUDO=sudo" >> "$GITHUB_ENV"
        fi

    ###############################################################################
    # 1. Unix-like runners ­­­­­­­­­­­­­­­­­­­­­­ (Ubuntu + macOS)                #
    ###############################################################################
    - name: Write squid.conf (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        cat > squid.conf <<'EOF'
        http_port 3128
        dns_v4_first on
        logfile_rotate 0
        acl all src all
        http_access allow all
        shutdown_lifetime 1 second
        EOF


    ###############################################################################
    # 2. Windows runner ­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­  #
    #    The Diladele build resolves *relative* paths under D:\Squid,             #
    #    so we embed an *absolute* workspace path instead.                        #
    ###############################################################################
    - name: Write squid.conf (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Use the current working dir, convert back-slashes to forward-slashes
        $root = (Get-Location).Path -replace '\\','/'

        @"
        http_port 3128
        dns_v4_first on
        logfile_rotate 0
        acl all src all
        http_access allow all
        shutdown_lifetime 1 second
        "@ | Out-File squid.conf -Encoding ascii

    - name: Launch Squid (background)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $exe  = 'D:\Squid\bin\squid.exe'   # path from the MSI
        $conf = "$PWD\squid.conf"           # your local config in the workspace
        Start-Process -FilePath $exe -ArgumentList '-N','-f',$conf -WindowStyle Hidden
        Start-Sleep -Seconds 5              # give Squid time to start

    - name: Launch Squid (background)
      if: runner.os != 'Windows'
      run: squid -N -f "./squid.conf" &

    - name: Build & install ocicl
      run: |
        ${SBCL:-sbcl} --load setup.lisp
        $OCICL_BIN version               # sanity
        $OCICL_BIN setup > ~/.sbclrc
        echo "(setf ocicl-runtime:*verbose* nil)" >> ~/.sbclrc

    - name: Prepare test env
      run: rm -rf systems systems.csv

    - name: Test “cli” template
      run: |
        mkdir testdir1 && cd testdir1
        $OCICL_BIN new cli-test cli
        cd cli-test
        make
        ./cli-test --help

    - name: Test “web1” template
      run: |
        mkdir testdir2 && cd testdir2
        $OCICL_BIN new web1-test web1
        cd web1-test
        make
        ./web1-test --help
        ./web1-test -p 8765 &
        APP_PID=$!
        for i in {1..30}; do
          curl --silent --fail http://localhost:8765/ && break
          echo "Waiting for web1…" && sleep 1
        done
        curl -s http://localhost:8765/ | grep "Welcome"
        kill $APP_PID

    - name: Test “basic” template
      run: |
        mkdir testdir3 && cd testdir3
        $OCICL_BIN new basic-test cli
        cd basic-test
        sbcl --eval "(asdf:load-system :basic-test)" \
             --eval "(basic-test:main)" \
             --eval "(uiop:quit 0)" | grep -v "Hello, world"

    - name: Test parent-dir install logic
      run: |
        set -euo pipefail
        mkdir -p testdir3/basic-test/child-test
        cd testdir3/basic-test/child-test

        $OCICL_BIN install completions

        # dir must stay empty
        [ "$(ls -A | wc -l)" -eq 0 ] || { echo "child-test not empty"; exit 1; }

        # completions must land beside parent
        ls -d ../*/cl-completions* >/dev/null 2>&1 || {
          echo "cl-completions* not found"; exit 1; }

    - name: Test ocicl through squid proxy
      shell: bash
      run: |
        set -euo pipefail
        set -x

        PORT=3128

        for _ in {1..30}; do
          curl --proxy "http://127.0.0.1:${PORT}" --head --fail --silent \
            https://example.com --output /dev/null
            $SUDO grep -qi "CONNECT example.com" "$SQUID_LOGS" && break
          sleep 1
        done || { echo "❌ squid proxy never started"; $SUDO cat "$SQUID_LOGS"; exit 1; }
        echo "✅ squid proxy is listening"

        HTTPS_PROXY="http://127.0.0.1:${PORT}" "$OCICL_BIN" list cl-ppcre

        $SUDO cat "$SQUID_LOGS"

    - name: Check squid log for ocicl traffic
      run: |
        $SUDO grep -q "ghcr.io" "$SQUID_LOGS" \
          && echo "✅ ocicl used the proxy" \
          || (echo "❌ ocicl never hit the proxy" && exit 1)
