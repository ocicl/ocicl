name: ocicl CI

on:
  push:
    branches: ['*']
  pull_request:
    branches: [ main, windows ]
  workflow_dispatch:

jobs:
  tests:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    defaults:      # use bash everywhere (Git Bash on Windows)
      run:
        shell: bash

    steps:
    # ── common ───────────────────────────────────────────────────────────
    - uses: actions/checkout@v4

    # ── OS-specific toolchain  ───────────────────────────────────────────
    - name: Install deps (MacOS via Homebrew)
      if: runner.os == 'macos'
      run: |
        brew install sbcl
        brew tap dotnet/dev-proxy
        brew install dev-proxy
        # expose brew env to later steps
        brew shellenv | sed 's/^export //' >> "$GITHUB_ENV"
        echo "$(brew --prefix)/bin" >> "$GITHUB_PATH"
        echo "$(brew --prefix)/sbin" >> "$GITHUB_PATH"

    - name: Install deps (Linux via Homebrew)
      if: runner.os == 'Linux'
      run: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        brew install sbcl
        brew tap dotnet/dev-proxy
        brew install dev-proxy
        # expose brew env to later steps
        brew shellenv | sed 's/^export //' >> "$GITHUB_ENV"
        echo "$(brew --prefix)/bin" >> "$GITHUB_PATH"
        echo "$(brew --prefix)/sbin" >> "$GITHUB_PATH"

    - name: Install winget
      if: runner.os == 'Windows'
      uses: Cyberboss/install-winget@v1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install deps (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        winget install -e --id Microsoft.DevProxy --source winget `
              --silent `
              --accept-package-agreements --accept-source-agreements
        $dp = (Get-Command devproxy -ErrorAction SilentlyContinue | Select-Object -First 1).Source
        if (-not $dp) {
          $dp = "$Env:LOCALAPPDATA\Programs\Dev Proxy\devproxy.exe"
        }
        if (-not (Test-Path $dp)) {
          Write-Error "Dev Proxy executable not found after winget install."
          exit 1
        }
        "DEVPROXY_BIN=$dp"           | Out-File $Env:GITHUB_ENV  -Append
        Split-Path $dp               | Out-File $Env:GITHUB_PATH -Append
        choco install -y sbcl openssl.light make wget
        echo "C:\Program Files\OpenSSL\bin" | Out-File $env:GITHUB_PATH -Append

    # Export a helper that abstracts ocicl(.exe) name
    - name: Define OCICL_BIN env var
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "OCICL_BIN=ocicl.exe" >> "$GITHUB_ENV"
          echo "$LOCALAPPDATA/ocicl/bin" >> "$GITHUB_PATH"
        else
          echo "OCICL_BIN=ocicl" >> "$GITHUB_ENV"
        fi

    # ── build ocicl itself ───────────────────────────────────────────────
    - name: Build & install ocicl
      run: |
        ${SBCL:-sbcl} --load setup.lisp
        $OCICL_BIN version               # sanity
        $OCICL_BIN setup > ~/.sbclrc
        echo "(setf ocicl-runtime:*verbose* nil)" >> ~/.sbclrc

    # ── identical test-suite for every OS ────────────────────────────────
    - name: Prepare test env
      run: rm -rf systems systems.csv

    - name: Test “cli” template
      run: |
        mkdir testdir1 && cd testdir1
        $OCICL_BIN new cli-test cli
        cd cli-test
        make
        ./cli-test --help

    - name: Test “web1” template
      run: |
        mkdir testdir2 && cd testdir2
        $OCICL_BIN new web1-test web1
        cd web1-test
        make
        ./web1-test --help
        ./web1-test -p 8765 &
        APP_PID=$!
        for i in {1..30}; do
          curl --silent --fail http://localhost:8765/ && break
          echo "Waiting for web1…" && sleep 1
        done
        curl -s http://localhost:8765/ | grep "Welcome"
        kill $APP_PID

    - name: Test “basic” template
      run: |
        mkdir testdir3 && cd testdir3
        $OCICL_BIN new basic-test cli
        cd basic-test
        sbcl --eval "(asdf:load-system :basic-test)" \
             --eval "(basic-test:main)" \
             --eval "(uiop:quit 0)" | grep -v "Hello, world"

    - name: Test parent-dir install logic
      run: |
        set -euo pipefail
        mkdir -p testdir3/basic-test/child-test
        cd testdir3/basic-test/child-test

        $OCICL_BIN install completions

        # dir must stay empty
        [ "$(ls -A | wc -l)" -eq 0 ] || { echo "child-test not empty"; exit 1; }

        # completions must land beside parent
        ls -d ../*/cl-completions* >/dev/null 2>&1 || {
          echo "cl-completions* not found"; exit 1; }

    - name: Run dev-proxy
      run: .github/scripts/run-dev-proxy.sh &

    # Linux
    - name: Trust Dev Proxy certificate (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo cp "$DEVPROXY_CERT" /usr/local/share/ca-certificates/devproxy-ca.crt
        sudo update-ca-certificates

    # Windows
    - name: Trust Dev Proxy certificate (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Import-Certificate -CertStoreLocation Cert:\LocalMachine\Root `
            -FilePath "$Env:DEVPROXY_CERT"

    - name: ocicl installs must go through Dev Proxy
      run: |
        echo "HTTPS_PROXY=$HTTPS_PROXY"
        $OCICL_BIN list cl-ppcre

    - name: Check Dev Proxy log for ocicl traffic
      run: |
        grep -q "raw.githubusercontent.com" "$DEVPROXY_LOG" \
          && echo "✅ ocicl used the proxy" \
          || (echo "❌ ocicl never hit the proxy" && exit 1)

    - uses: actions/upload-artifact@v4
      with:
        name: devproxy-log-${{ runner.os }}
        path: ${{ env.DEVPROXY_LOG }}
